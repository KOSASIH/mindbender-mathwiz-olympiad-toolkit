{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73231,"databundleVersionId":8133715,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kosasihcorp/mathwiz-mindbender-notebook?scriptVersionId=171780396\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# MathWiz Mindbender Notebook: Supercharged with AI üöÄ\n\nWelcome to the MathWiz Mindbender Notebook, your ultimate AI-powered companion for AI Mathematical Olympiads! üèÜ\n\nFeatures:\n\n1. Advanced AI algorithms for problem-solving üíª\n2. Strategic insights and tips from AI experts ü§ñ\n3. Personalized practice problems with solutions üìù\n4. Interactive challenges with real-time feedback üéÆ\n5. Glossary of mathematical terms with AI-generated explanations üìö\n\n# Table of Contents:\n\n- Introduction to AI Mathematical Olympiads ü§ù\n- Fundamentals of Problem Solving with AI üß†\n- Advanced AI Techniques for Mathematical Olympiads üõ†Ô∏è\n- Personalized Practice Problems üéØ\n- Solutions and Explanations with AI Insights üß©\n- Glossary of Mathematical Terms with AI-Generated Explanations üìú\n\n# Get Started:\n\n1. Download the AI-enhanced notebook\n2. Dive into the world of mathematical challenges with AI by your side\n3. Sharpen your skills, conquer the Olympiads, and become an AI Mathematical Olympian! üèÖ\n\nWith the power of AI, the MathWiz Mindbender Notebook is now a super advanced high-tech system, ready to help you reach new heights in AI Mathematical Olympiads! üåü","metadata":{}},{"cell_type":"code","source":"import random\nimport numpy as np\ndef generate_random_math_problem(difficulty):\n    \"\"\"\n    Generates a random mathematical problem based on the given difficulty level.\n    Parameters:\n    difficulty (int): The difficulty level of the problem (1-5).\n    Returns:\n    tuple: A tuple containing the problem as a string and the correct answer.\n    \"\"\"\n    operators = ['+', '-', '*', '/']\n    num1 = random.randint(1, 10 ** difficulty)\n    num2 = random.randint(1, 10 ** difficulty)\n    operator = random.choice(operators)\n    if operator == '/':\n        while num2 == 0:\n            num2 = random.randint(1, 10 ** difficulty)\n        problem = f\"{num1} {operator} {num2}\"\n        answer = num1 / num2\n    else:\n        problem = f\"{num1} {operator} {num2}\"\n        if operator == '+':\n            answer = num1 + num2\n        elif operator == '-':\n            answer = num1 - num2\n        else:\n            answer = num1 * num2\n    return problem, answer\ndef solve_math_problem(problem):\n    \"\"\"\n    Solves a given mathematical problem using a neural network trained with TensorFlow.\n    Parameters:\n    problem (str): The mathematical problem as a string.\n    Returns:\n    float: The solution to the problem.\n    \"\"\"\n    # Load the trained neural network model\n    import tensorflow as tf\n    model = tf.keras.models.load_model('math_solver.h5')\n    # Preprocess the input\n    input_layer = tf.keras.layers.Input(shape=(1,))\n    x = tf.keras.layers.Dense(128, activation='relu')(input_layer)\n    x = tf.keras.layers.Dense(128, activation='relu')(x)\n    output_layer = tf.keras.layers.Dense(1, activation='linear')(x)\n    model = tf.keras.models.Model(inputs=input_layer, outputs=output_layer)\n    # Encode the problem as a numerical input\n    encoded_problem = np.zeros((1, 1))\n    for i, char in enumerate(problem):\n        if char == '+':\n            encoded_problem[0, i] = 1\n        elif char == '-':\n            encoded_problem[0, i] = 2\n        elif char == '*':\n            encoded_problem[0, i] = 3\n        elif char == '/':\n            encoded_problem[0, i] = 4\n        else:\n            encoded_problem[0, i] = int(char)\n    # Use the neural network to solve the problem\n    solution = model.predict(encoded_problem)[0][0]\n    return solution\ndef check_answer(problem, user_answer, correct_answer):\n    \"\"\"\n    Checks if the user's answer is correct.\n    Parameters:\n    problem (str): The mathematical problem as a string.\n    user_answer (float): The user's answer.\n    correct_answer (float): The correct answer.\n    Returns:\n    bool: True if the user's answer is correct, False otherwise.\n    \"\"\"\n    return abs(user_answer - correct_answer) < 1e-9\ndef main():\n    difficulty = int(input(\"Enter the difficulty level (1-5): \"))\n    problem, correct_answer = generate_random_math_problem(difficulty)\n    print(f\"Problem: {problem}\")\n    user_answer = float(input(\"Enter your answer: \"))\n    if check_answer(problem, user_answer, correct_answer):\n        print(\"Correct!\")\n    else:\n        print(f\"Wrong! The correct answer is {correct_answer}\")\nif __name__ == \"__main__\":\n    main()","metadata":{"execution":{"iopub.status.busy":"2024-04-13T05:56:05.131576Z","iopub.execute_input":"2024-04-13T05:56:05.131978Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}}]}